Microservices:
A micro service is a small autonomous service that works together.

Martin Fowler:
The mocroservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanism, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery.
There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies 
-------------------------------------------------------------------------------------------------------
-REST
-Small well-chosen deployable units
-Cloud enabled
-------------------------------------------------------------------------------------------------------
Challenges:
1-Bounded Context- Small units/services with well-defined responsibility/boundary
2-Configuration Management - Multiple environments with many properties/configuration
3-Dynamic scale up and scale down - Have new instances in case of load dynamically and balance load
4-Visibilty - Functionality should be debug able and moniterable
5-Pack of card - one MS depends on other MS - If one collapse all will go down so have a fault tolerance strategy
-------------------------------------------------------------------------------------------------------
Spring Cloud - Common patterns and framework for distributed system developed with MS

Finchley M2 release of Spring Cloud.
-------------------------------------------------------------------------------------------------------
Challengs:
1-Configiration Management: 
	Spring cloud config server
2- Dynamic scale up and down:
		Naming Server (Eureka) 
			Service Registry
			Service Discovery
		Ribbon (Client side load balancing)
		Feign (Easier REST clients)

3-Visibility and Monitoring:
	Zipkin Distributed Tracing
	Netflix (Zuul) API Gateway


4-Fault Tolerance
	Hystrix
-------------------------------------------------------------------------------------------------------
Advantanges of MS Architecture
1- New Technology & Process Adaption - MS in different technologies
2 - Dynamic Scaling
3- Faster Release Cycles - Small and independent MS can be developed and enhanced quickly
-------------------------------------------------------------------------------------------------------
limit-service
-------------------------------------------------------------------------------------------------------
spring-cloud-confg-server
buildpath ==> link source == > git repo path
-------------------------------------------------------------------------------------------------------
URLS
http://localhost:8888/limits-service/default
http://localhost:8888/limits-service/qa
http://localhost:8000/currency-exchange/from/pak/to/usdhttp://localhost:8888/limits-service/dev

-Dserver.port=8001

http://localhost:8000/h2-console/

http://localhost:8000/currency-exchange/from/USD/to/PKR

spring starter project
http://start.spring.io/

-------------------------------------------------------------------------------------------------------
Feign
1- Simple way of calling other REST services.
2- Integration with ribbon which is client side load balancing. 

add @EnableFeignClient Annotation
		Create a proxy interface
		calll the proxy

name=> 
	spring.application.name=currency-exchange-service
url=>	
server.port=8000
@FeignClient(name="currency-exchange-service" , url="")
Used to call external rest service using proxy
